// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/review_service/controller/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "monorepo/src/review_service/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AssignReview mocks base method.
func (m *MockController) AssignReview(ctx context.Context, req entity.AssignReviewReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignReview", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignReview indicates an expected call of AssignReview.
func (mr *MockControllerMockRecorder) AssignReview(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignReview", reflect.TypeOf((*MockController)(nil).AssignReview), ctx, req)
}

// CreateReview mocks base method.
func (m *MockController) CreateReview(ctx context.Context, req entity.CreateReviewReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockControllerMockRecorder) CreateReview(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockController)(nil).CreateReview), ctx, req)
}

// GetAll mocks base method.
func (m *MockController) GetAll(ctx context.Context) ([]entity.ReviewOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.ReviewOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockControllerMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockController)(nil).GetAll), ctx)
}

// ResolveReview mocks base method.
func (m *MockController) ResolveReview(ctx context.Context, req entity.ResolveReviewReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveReview", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveReview indicates an expected call of ResolveReview.
func (mr *MockControllerMockRecorder) ResolveReview(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveReview", reflect.TypeOf((*MockController)(nil).ResolveReview), ctx, req)
}
