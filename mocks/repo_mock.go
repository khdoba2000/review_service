// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/review_service/storage/repo/review.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "monorepo/src/review_service/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReviewRepo is a mock of ReviewRepo interface.
type MockReviewRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepoMockRecorder
}

// MockReviewRepoMockRecorder is the mock recorder for MockReviewRepo.
type MockReviewRepoMockRecorder struct {
	mock *MockReviewRepo
}

// NewMockReviewRepo creates a new mock instance.
func NewMockReviewRepo(ctrl *gomock.Controller) *MockReviewRepo {
	mock := &MockReviewRepo{ctrl: ctrl}
	mock.recorder = &MockReviewRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepo) EXPECT() *MockReviewRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReviewRepo) Create(arg0 context.Context, arg1 entity.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReviewRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReviewRepo)(nil).Create), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockReviewRepo) GetAll(ctx context.Context) ([]entity.ReviewOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.ReviewOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockReviewRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReviewRepo)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockReviewRepo) Update(ctx context.Context, req entity.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReviewRepoMockRecorder) Update(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReviewRepo)(nil).Update), ctx, req)
}
